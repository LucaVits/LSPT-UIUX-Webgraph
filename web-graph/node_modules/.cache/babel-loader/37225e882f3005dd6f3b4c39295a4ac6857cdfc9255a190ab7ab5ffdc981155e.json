{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\irock\\\\Documents\\\\RCOS\\\\LSPT-UIUX-Webgraph\\\\web-graph\\\\src\\\\components\\\\WebGraph.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WebGraph = ({\n  datasets,\n  width = 800,\n  height = 600,\n  renderInfoBox\n}) => {\n  _s();\n  const svgRef = useRef();\n  const simulationRef = useRef();\n  const [selectedNode, setSelectedNode] = useState(null);\n  const nodesRef = useRef([]);\n  const linksRef = useRef([]);\n  function interpolateColor(value) {\n    const clampedValue = Math.max(0, Math.min(1, value));\n    const red = [230, 0, 0];\n    const yellow = [230, 255, 0];\n    const green = [0, 230, 0];\n    if (clampedValue <= 0.5) {\n      const t = clampedValue * 2;\n      return `rgb(${lerp(red[0], yellow[0], t)}, ${lerp(red[1], yellow[1], t)}, ${lerp(red[2], yellow[2], t)})`;\n    }\n    const t = (clampedValue - 0.5) * 2;\n    return `rgb(${lerp(yellow[0], green[0], t)}, ${lerp(yellow[1], green[1], t)}, ${lerp(yellow[2], green[2], t)})`;\n  }\n  function lerp(start, end, t) {\n    return Math.round(start + (end - start) * t);\n  }\n  useEffect(() => {\n    if (!nodesRef.current.length || !linksRef.current.length) {\n      const mergedNodes = [];\n      const mergedEdges = [];\n      const graphOffset = 200;\n      datasets.forEach((data, index) => {\n        const xOffset = index % 3 * graphOffset;\n        const yOffset = Math.floor(index / 3) * graphOffset;\n        const nodeMap = new Map();\n        data.nodes.forEach(node => {\n          const newNode = {\n            ...node,\n            x: node.x || Math.random() * width + xOffset,\n            y: node.y || Math.random() * height + yOffset,\n            id: `${index}-${node.id}`\n          };\n          nodeMap.set(node.id, newNode.id);\n          mergedNodes.push(newNode);\n        });\n        data.edges.forEach(edge => {\n          mergedEdges.push({\n            source: nodeMap.get(edge.source),\n            target: nodeMap.get(edge.target)\n          });\n        });\n      });\n      nodesRef.current = mergedNodes;\n      linksRef.current = mergedEdges;\n    }\n    const svg = d3.select(svgRef.current);\n    svg.attr(\"viewBox\", [0, 0, width, height]);\n    if (!simulationRef.current) {\n      simulationRef.current = d3.forceSimulation(nodesRef.current).force(\"link\", d3.forceLink(linksRef.current).id(d => d.id).distance(100).strength(0.1)).force(\"collision\", d3.forceCollide().radius(d => d.size).strength(0.9)).force(\"boundary\", boundaryForce(width, height)).on(\"tick\", () => {\n        link.attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y);\n        node.attr(\"cx\", d => d.x).attr(\"cy\", d => d.y);\n        labels.attr(\"x\", d => d.x).attr(\"y\", d => d.y - 15);\n        if (selectedNode) {\n          infoLine.attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => 100).attr(\"y2\", d => 100);\n        }\n      });\n    } else {\n      simulationRef.current.nodes(nodesRef.current);\n      simulationRef.current.force(\"link\").links(linksRef.current);\n      simulationRef.current.alpha(0.3).restart();\n    }\n    const link = svg.selectAll(\".link\").data(linksRef.current).join(\"line\").attr(\"class\", \"link\").attr(\"stroke\", \"#999\").attr(\"stroke-width\", 1.5);\n    const node = svg.selectAll(\".node\").data(nodesRef.current).join(\"circle\").attr(\"class\", \"node\").attr(\"r\", d => d.size).attr(\"fill\", d => interpolateColor(d.page_rank))\n    //.attr(\"stroke\", d => (selectedNode?.id === d.id ? \"black\" : \"none\"))\n    .attr(\"stroke\", d => \"black\")\n    //.attr(\"stroke-width\", 3)\n    .attr(\"stroke-width\", d => (selectedNode === null || selectedNode === void 0 ? void 0 : selectedNode.id) === d.id ? 3 : 0.4).call(d3.drag().on(\"start\", dragStarted).on(\"drag\", dragged).on(\"end\", dragEnded)).on(\"click\", (event, d) => {\n      setSelectedNode(d);\n    });\n    const labels = svg.selectAll(\".label\").data(nodesRef.current).join(\"text\").attr(\"class\", \"label\").attr(\"text-anchor\", \"middle\").attr(\"dy\", -15).style(\"font-size\", \"12px\").style(\"pointer-events\", \"none\").text(d => d.title);\n    const infoLine = svg.selectAll(\".info-line\").data(linksRef.current).join(\"line\").attr(\"class\", \"info-line\").attr(\"stroke\", \"#999\").attr(\"stroke-width\", 1.5);\n    function boundaryForce(width, height) {\n      return function () {\n        nodesRef.current.forEach(d => {\n          if (d.x < d.size) d.x = d.size;\n          if (d.x > width - d.size) d.x = width - d.size;\n          if (d.y < d.size) d.y = d.size;\n          if (d.y > height - d.size) d.y = height - d.size;\n        });\n      };\n    }\n    function dragStarted(event, d) {\n      if (!event.active) simulationRef.current.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    }\n    function dragged(event, d) {\n      d.fx = event.x;\n      d.fy = event.y;\n    }\n    function dragEnded(event, d) {\n      if (!event.active) simulationRef.current.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    }\n  }, [datasets, width, height, selectedNode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"relative\",\n      width,\n      height\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      width: width,\n      height: height\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: \"20px\",\n        right: \"20px\",\n        pointerEvents: \"auto\",\n        zIndex: 10\n      },\n      children: renderInfoBox(selectedNode)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 5\n  }, this);\n};\n_s(WebGraph, \"XBaHiSaRpUQcOf2rUlBNY/cctNU=\");\n_c = WebGraph;\nexport default WebGraph;\nvar _c;\n$RefreshReg$(_c, \"WebGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","jsxDEV","_jsxDEV","WebGraph","datasets","width","height","renderInfoBox","_s","svgRef","simulationRef","selectedNode","setSelectedNode","nodesRef","linksRef","interpolateColor","value","clampedValue","Math","max","min","red","yellow","green","t","lerp","start","end","round","current","length","mergedNodes","mergedEdges","graphOffset","forEach","data","index","xOffset","yOffset","floor","nodeMap","Map","nodes","node","newNode","x","random","y","id","set","push","edges","edge","source","get","target","svg","select","attr","forceSimulation","force","forceLink","d","distance","strength","forceCollide","radius","size","boundaryForce","on","link","labels","infoLine","links","alpha","restart","selectAll","join","page_rank","call","drag","dragStarted","dragged","dragEnded","event","style","text","title","active","alphaTarget","fx","fy","position","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","top","right","pointerEvents","zIndex","_c","$RefreshReg$"],"sources":["C:/Users/irock/Documents/RCOS/LSPT-UIUX-Webgraph/web-graph/src/components/WebGraph.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport * as d3 from \"d3\";\r\n\r\nconst WebGraph = ({ datasets, width = 800, height = 600, renderInfoBox }) => {\r\n  const svgRef = useRef();\r\n  const simulationRef = useRef();\r\n  const [selectedNode, setSelectedNode] = useState(null);\r\n  const nodesRef = useRef([]);\r\n  const linksRef = useRef([]);\r\n\r\n  function interpolateColor(value) {\r\n  const clampedValue = Math.max(0, Math.min(1, value));\r\n\r\n  const red = [230, 0, 0];\r\n  const yellow = [230, 255, 0];\r\n  const green = [0, 230, 0];\r\n\r\n  if (clampedValue <= 0.5) {\r\n    const t = clampedValue * 2;\r\n    return `rgb(${lerp(red[0], yellow[0], t)}, ${lerp(red[1], yellow[1], t)}, ${lerp(red[2], yellow[2], t)})`;\r\n  }\r\n  \r\n  const t = (clampedValue - 0.5) * 2;\r\n  return `rgb(${lerp(yellow[0], green[0], t)}, ${lerp(yellow[1], green[1], t)}, ${lerp(yellow[2], green[2], t)})`;\r\n}\r\n\r\nfunction lerp(start, end, t) {\r\n  return Math.round(start + (end - start) * t);\r\n}\r\n\r\n  useEffect(() => {\r\n    if (!nodesRef.current.length || !linksRef.current.length) {\r\n      const mergedNodes = [];\r\n      const mergedEdges = [];\r\n      const graphOffset = 200;\r\n\r\n      datasets.forEach((data, index) => {\r\n        const xOffset = (index % 3) * graphOffset;\r\n        const yOffset = Math.floor(index / 3) * graphOffset;\r\n\r\n        const nodeMap = new Map();\r\n        data.nodes.forEach(node => {\r\n          const newNode = {\r\n            ...node,\r\n            x: node.x || Math.random() * width + xOffset,\r\n            y: node.y || Math.random() * height + yOffset,\r\n            id: `${index}-${node.id}`\r\n          };\r\n          nodeMap.set(node.id, newNode.id);\r\n          mergedNodes.push(newNode);\r\n        });\r\n\r\n        data.edges.forEach(edge => {\r\n          mergedEdges.push({\r\n            source: nodeMap.get(edge.source),\r\n            target: nodeMap.get(edge.target)\r\n          });\r\n        });\r\n      });\r\n\r\n      nodesRef.current = mergedNodes;\r\n      linksRef.current = mergedEdges;\r\n    }\r\n\r\n    const svg = d3.select(svgRef.current);\r\n    svg.attr(\"viewBox\", [0, 0, width, height]);\r\n\r\n    if (!simulationRef.current) {\r\n      simulationRef.current = d3.forceSimulation(nodesRef.current)\r\n        .force(\"link\", d3.forceLink(linksRef.current).id(d => d.id).distance(100).strength(0.1))\r\n        .force(\"collision\", d3.forceCollide().radius(d => d.size).strength(0.9))\r\n        .force(\"boundary\", boundaryForce(width, height))\r\n        .on(\"tick\", () => {\r\n          link\r\n            .attr(\"x1\", d => d.source.x)\r\n            .attr(\"y1\", d => d.source.y)\r\n            .attr(\"x2\", d => d.target.x)\r\n            .attr(\"y2\", d => d.target.y);\r\n\r\n          node\r\n            .attr(\"cx\", d => d.x)\r\n            .attr(\"cy\", d => d.y);\r\n\r\n          labels\r\n            .attr(\"x\", d => d.x)\r\n            .attr(\"y\", d => d.y - 15);\r\n\r\n          if (selectedNode) {\r\n          infoLine\r\n            .attr(\"x1\", d => d.source.x)\r\n            .attr(\"y1\", d => d.source.y)\r\n            .attr(\"x2\", d => 100)\r\n            .attr(\"y2\", d => 100);\r\n          }\r\n        });\r\n    } else {\r\n      simulationRef.current.nodes(nodesRef.current);\r\n      simulationRef.current.force(\"link\").links(linksRef.current);\r\n      simulationRef.current.alpha(0.3).restart();\r\n    }\r\n\r\n    const link = svg\r\n      .selectAll(\".link\")\r\n      .data(linksRef.current)\r\n      .join(\"line\")\r\n      .attr(\"class\", \"link\")\r\n      .attr(\"stroke\", \"#999\")\r\n      .attr(\"stroke-width\", 1.5);\r\n\r\n    const node = svg\r\n      .selectAll(\".node\")\r\n      .data(nodesRef.current)\r\n      .join(\"circle\")\r\n      .attr(\"class\", \"node\")\r\n      .attr(\"r\", d => d.size)\r\n      .attr(\"fill\", d => interpolateColor(d.page_rank))\r\n      //.attr(\"stroke\", d => (selectedNode?.id === d.id ? \"black\" : \"none\"))\r\n      .attr(\"stroke\", d => \"black\")\r\n      //.attr(\"stroke-width\", 3)\r\n      .attr(\"stroke-width\", d => (selectedNode?.id === d.id ? 3 : 0.4))\r\n      .call(d3.drag()\r\n        .on(\"start\", dragStarted)\r\n        .on(\"drag\", dragged)\r\n        .on(\"end\", dragEnded)\r\n      )\r\n      .on(\"click\", (event, d) => {\r\n        setSelectedNode(d);\r\n      });\r\n\r\n    const labels = svg\r\n      .selectAll(\".label\")\r\n      .data(nodesRef.current)\r\n      .join(\"text\")\r\n      .attr(\"class\", \"label\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"dy\", -15)\r\n      .style(\"font-size\", \"12px\")\r\n      .style(\"pointer-events\", \"none\")\r\n      .text(d => d.title);\r\n\r\n    const infoLine = svg\r\n      .selectAll(\".info-line\")\r\n      .data(linksRef.current)\r\n      .join(\"line\")\r\n      .attr(\"class\", \"info-line\")\r\n      .attr(\"stroke\", \"#999\")\r\n      .attr(\"stroke-width\", 1.5);\r\n\r\n    function boundaryForce(width, height) {\r\n      return function () {\r\n        nodesRef.current.forEach(d => {\r\n          if (d.x < d.size) d.x = d.size;\r\n          if (d.x > width - d.size) d.x = width - d.size;\r\n          if (d.y < d.size) d.y = d.size;\r\n          if (d.y > height - d.size) d.y = height - d.size;\r\n        });\r\n      };\r\n    }\r\n\r\n    function dragStarted(event, d) {\r\n      if (!event.active) simulationRef.current.alphaTarget(0.3).restart();\r\n      d.fx = d.x;\r\n      d.fy = d.y;\r\n    }\r\n\r\n    function dragged(event, d) {\r\n      d.fx = event.x;\r\n      d.fy = event.y;\r\n    }\r\n\r\n    function dragEnded(event, d) {\r\n      if (!event.active) simulationRef.current.alphaTarget(0);\r\n      d.fx = null;\r\n      d.fy = null;\r\n    }\r\n  }, [datasets, width, height, selectedNode]);\r\n\r\n  return (\r\n    <div style={{ position: \"relative\", width, height }}>\r\n      <svg ref={svgRef} width={width} height={height}></svg>\r\n      {selectedNode && (\r\n        <div\r\n          style={{\r\n            position: \"absolute\",\r\n            top: \"20px\",\r\n            right: \"20px\",\r\n            pointerEvents: \"auto\",\r\n            zIndex: 10\r\n          }}\r\n        >\r\n          {renderInfoBox(selectedNode)}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WebGraph;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}